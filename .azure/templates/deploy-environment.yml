parameters:
  - name: environment
    type: string
    default: 'development'
  - name: serviceConnection
    type: string
  - name: appServiceName
    type: string
  - name: resourceGroup
    type: string
    default: 'taskify-rg'
  - name: useSlot
    type: boolean
    default: false
  - name: slotName
    type: string
    default: 'staging'
  - name: swapSlots
    type: boolean
    default: false

jobs:
  - deployment: Deploy
    displayName: 'Deploy to ${{ parameters.environment }}'
    environment: ${{ parameters.environment }}
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadBuildArtifacts@0
              displayName: 'Download artifacts'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            
            # Deploy environment variables
            - task: AzureCLI@2
              displayName: 'Deploy environment variables'
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: 'bash'
                scriptLocation: 'scriptPath'
                scriptPath: '$(System.ArtifactsDirectory)/drop/.azure/scripts/deploy-env-variables.sh'
                arguments: '${{ parameters.environment }} ${{ parameters.appServiceName }} ${{ parameters.resourceGroup }}'
            
            # Run database migrations
            - task: AzureCLI@2
              displayName: 'Run database migrations'
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: 'bash'
                scriptLocation: 'scriptPath'
                scriptPath: '$(System.ArtifactsDirectory)/drop/.azure/scripts/db-migrate.sh'
                arguments: '${{ parameters.environment }}'
                workingDirectory: '$(System.ArtifactsDirectory)/drop'
            
            # Deploy to Azure Web App
            - ${{ if eq(parameters.useSlot, true) }}:
              - task: AzureWebApp@1
                displayName: 'Deploy to Azure Web App - ${{ parameters.appServiceName }} (Slot: ${{ parameters.slotName }})'
                inputs:
                  azureSubscription: ${{ parameters.serviceConnection }}
                  appType: 'webAppLinux'
                  appName: ${{ parameters.appServiceName }}
                  deployToSlotOrASE: true
                  resourceGroupName: ${{ parameters.resourceGroup }}
                  slotName: ${{ parameters.slotName }}
                  package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
                  startUpCommand: 'npm start'
                  appSettings: |
                    -NODE_ENV ${{ parameters.environment }}
                    -WEBSITE_NODE_DEFAULT_VERSION 18.x
            
            - ${{ if eq(parameters.useSlot, false) }}:
              - task: AzureWebApp@1
                displayName: 'Deploy to Azure Web App - ${{ parameters.appServiceName }}'
                inputs:
                  azureSubscription: ${{ parameters.serviceConnection }}
                  appType: 'webAppLinux'
                  appName: ${{ parameters.appServiceName }}
                  package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
                  startUpCommand: 'npm start'
                  appSettings: |
                    -NODE_ENV ${{ parameters.environment }}
                    -WEBSITE_NODE_DEFAULT_VERSION 18.x
            
            # Swap slots if needed
            - ${{ if eq(parameters.swapSlots, true) }}:
              - task: AzureCLI@2
                displayName: 'Swap slots'
                inputs:
                  azureSubscription: ${{ parameters.serviceConnection }}
                  scriptType: 'bash'
                  scriptLocation: 'scriptPath'
                  scriptPath: '$(System.ArtifactsDirectory)/drop/.azure/scripts/slot-swap.sh'
                  arguments: '${{ parameters.appServiceName }} ${{ parameters.resourceGroup }} ${{ parameters.slotName }} production' 